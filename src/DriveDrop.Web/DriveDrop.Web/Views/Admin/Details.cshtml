@model  DriveDrop.Web.ViewModels.CurrentCustomerModel

@{
    ViewData["Title"] = "Details";
}



<div class="side-2">


    @await Html.PartialAsync("AdminNavigation", 1)


</div>
<div class="center-2">
    <div class="page account-page customer-info-page">
        <div class="page-title">
            <h1>Details</h1>
        </div>
        <div class="page-body">
            <div class="fieldset">
                <h3>@Model.CustomerType: user details</h3>

                <div class="form-fields">

                    <div class="inputs">
                        <label>Customer status</label>
                        @Html.TextBoxFor(model => model.CustomerStatus, new { @disabled = "disabled" })

                    </div>
                    <div class="inputs">
                        <label>Login user</label>
                        @Html.TextBoxFor(model => model.UserName, new {@disabled = "disabled", @id= "UserName" })
                       
                   </div>

                    @if (!Model.IsAdmin)
                    {
                        
                            <div id="impersonateDiv" class="invisible">
                                <div class="inputs">
                                    <label>Imput the impersonate code</label>
                                    @*<input name="ImpersonateCode" id="ImpersonateCode" />*@
                                    @Html.TextBox("ImpersonateCode", null, new { @id = "ImpersonateCode" })
                                </div>
                            </div>
                            
                            <div class="buttons">
                                <input type="button" class="btn btn-danger" id="impersonateBtn" value="Impersonate" />

                            </div>
                    }


                    <div class="inputs">
                        <label>Customer type</label>

                        @Html.EditorFor(model => model.CustomerType)

                    </div>


                    <div class="inputs">
                        @Html.LabelFor(model => model.LastName)


                        @Html.EditorFor(model => model.LastName)

                    </div>
                    <div class="inputs">

                        @Html.LabelFor(model => model.FirstName)


                        @Html.EditorFor(model => model.FirstName)

                    </div>

                    <div class="inputs">

                        @Html.LabelFor(model => model.Email)
                        @Html.EditorFor(model => model.Email)

                    </div>
                    <div class="inputs">



                        @Html.LabelFor(model => model.Phone)
                        @Html.EditorFor(model => model.Phone)

                    </div>
                    <div class="inputs">
                        <div class="title">
                            <Label><strong>Personal photo</strong></Label>
                        </div>
                        <div class="avatar-page">

                            <img id="blah" src="@Model.PersonalPhotoUri" class="img-thumbnail img-responsive" width="150" height="150" />
                        </div>

                    </div>

                </div>
            </div>

            @if (Model.CustomerType == "driver")
            {
                <div class="fieldset">
                    <div class="title">
                        <strong><label>Vehicle informations</label></strong>
                    </div>
                    <div class="form-fields">
                        <div class="inputs">

                            @Html.LabelFor(model => model.VehicleMake)
                            @Html.EditorFor(model => model.VehicleMake)

                        </div>
                        <div class="inputs">

                            @Html.LabelFor(model => model.VehicleModel)
                            @Html.EditorFor(model => model.VehicleModel)

                        </div>
                        <div class="inputs">

                            @Html.LabelFor(model => model.VehicleColor)
                            @Html.EditorFor(model => model.VehicleColor)

                        </div>
                        <div class="inputs">

                            @Html.LabelFor(model => model.VehicleYear)
                            @Html.EditorFor(model => model.VehicleYear)

                        </div>

                        <div class="inputs">
                            <div class="row">
                                <div class="col-md-4">
                                    <div>
                                        <label>Driver license</label>
                                    </div>
                                    <img id="blah" src="@Model.DriverLincensePictureUri" class="img-thumbnail img-responsive" width="150" height="150" />
                                </div>
                                <div class="col-md-4">
                                    <div>
                                        <label>Vehicle photo</label>
                                    </div>
                                    <img id="blah" src="@Model.VehiclePhotoUri" class="img-thumbnail img-responsive" width="150" height="150" />
                                </div>
                                <div class="col-md-4">
                                    <div>
                                        <label>Proof of insurance</label>
                                    </div>
                                    <img id="blah" src="@Model.InsurancePhotoUri" class="img-thumbnail img-responsive" width="150" height="150" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }


            <div class="address-list">
                <ol class="opc">
                    <li class="tab-section allow active">
                        <div class="step-title">
                            <h4 class="title">Default Address</h4>
                        </div>
                    </li>
                </ol>

                @if (Model.Addresses.Where(x => x.TypeAddress.ToLower() == "home" || x.TypeAddress == "default").FirstOrDefault() == null)
                {
                    <div class="alert alert-danger" role="alert">
                        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                        <span class="sr-only">Error:</span>
                        THERE ARE NO DEFAULT ADDRESS
                    </div>
                }

                @foreach (var address in Model.Addresses.Where(x => x.TypeAddress.ToLower() == "home" || x.TypeAddress == "default"))
                {
                    <div class="form-fields">


                        <div class="section address-item">
                            <div class="title">

                                <strong>@address.Contact @address.Phone</strong>
                            </div>
                            <ul class="info">

                                <li class="address1">
                                    Street
                                    @address.Street
                                </li>
                                <li class="city-state-zip">
                                    @address.City, @address.State, @address.ZipCode
                                </li>
                                <li class="country">
                                    @address.Country
                                </li>
                            </ul>

                        </div>

                    </div>
                }



            </div>


            <div class="address-list">

                <ol class="opc">
                    <li class="tab-section allow active">
                        <div class="step-title">
                            <h4 class="title">Pickup Address</h4>
                        </div>
                    </li>
                </ol>

                @foreach (var address in Model.Addresses.Where(x => x.TypeAddress.ToLower() == "pickup"))
                {

                    <div class="section address-item">
                        <div class="title">
                            <strong>@address.Contact @address.Phone</strong>
                        </div>
                        <ul class="info">

                            <li class="address1">
                                Street
                                @address.Street
                            </li>
                            <li class="city-state-zip">
                                @address.City, @address.State, @address.ZipCode
                            </li>
                            <li class="country">
                                @address.Country
                            </li>
                        </ul>

                    </div>
                }
            </div>

            <div class="address-list">
                <ol class="opc">
                    <li class="tab-section allow active">
                        <div class="step-title">
                            <h4 class="title">Dropoff Address</h4>
                        </div>
                    </li>
                </ol>


                @foreach (var address in Model.Addresses.Where(x => x.TypeAddress.ToLower() == "drop"))
                {

                    <div class="section address-item">
                        <div class="title">
                            <strong>@address.Contact @address.Phone</strong>
                        </div>
                        <ul class="info">

                            <li class="address1">
                                Street
                                @address.Street
                            </li>
                            <li class="city-state-zip">
                                @address.City, @address.State, @address.ZipCode
                            </li>
                            <li class="country">
                                @address.Country
                            </li>
                        </ul>

                    </div>
                }
            </div>

            @if (Model.CustomerType == "sender" && Model.ShipmentSenders.Count()>0)
{
                <div class="order-list">
                    <div class="page-title">
                        <h1>Packages</h1>
                    </div>
                    @foreach (var item in Model.ShipmentSenders)
        {
            var urlPickup = ViewBag.Uri + item.PickupPictureUri;
            var urlDelivery = "";
            if (string.IsNullOrEmpty(item.DeliveredPictureUri))
            {
                urlDelivery = ViewBag.Uri + "/images/DefaultProfileImage.png";
            }
            else
            { urlDelivery = ViewBag.Uri + item.DeliveredPictureUri; }

            <div class="section order-item">
                <div class="title">
                    <strong>Shipping #: @item.IdentityCode</strong>
                </div>
                <ul class="info">
                    <li>Status: <span class="order-status pending">@Html.DisplayFor(modelItem => item.ShippingStatus.Name)</span></li>
                    <li>Date: <span class="order-status pending">@Html.DisplayFor(modelItem => item.ShippingCreateDate)</span></li>
                    <li>Priority: <span class="order-date"> @Html.DisplayFor(modelItem => item.ShippingCreateDate)</span></li>
                    <li>Order Total: <span class="order-total">@Html.DisplayFor(modelItem => item.Amount)/@Html.DisplayFor(modelItem => item.Discount)</span></li>
                    <li>Pickup Address: <span class="order-status pending">@Html.DisplayFor(modelItem => item.PickupAddress.Street), @Html.DisplayFor(modelItem => item.PickupAddress.City), @Html.DisplayFor(modelItem => item.PickupAddress.ZipCode)</span></li>
                    <li>Delivery Address: <span class="order-status pending">@Html.DisplayFor(modelItem => item.DeliveryAddress.Street), @Html.DisplayFor(modelItem => item.DeliveryAddress.City), @Html.DisplayFor(modelItem => item.DeliveryAddress.ZipCode)</span></li>
                    <li>
                        <div class="pull-left">
                            <div>PickUp Image</div>
                            <img src="@urlPickup" class="img-rounded" alt="no package image" width="100" height="75">
                        </div>
                        <div class="col-5">
                            <div>Delivery Image</div>
                            <img src="@urlDelivery" class="img-rounded" alt="no package image" width="100" height="75">
                        </div>
                    </li>
                </ul>

            </div>
        }

                </div>
}
            @if (Model.CustomerType == "driver" && Model.ShipmentDrivers.Count() > 0)
{
                <div class="order-list">
                    <div class="page-title">
                        <h1>Packages</h1>
                    </div>
                    @foreach (var item in Model.ShipmentDrivers)
        {
            var urlPickup = ViewBag.Uri + item.PickupPictureUri;
            var urlDelivery = "";
            if (string.IsNullOrEmpty(item.DeliveredPictureUri))
            {
                urlDelivery = ViewBag.Uri + "/images/DefaultProfileImage.png";
            }
            else
            { urlDelivery = ViewBag.Uri + item.DeliveredPictureUri; }

            <div class="section order-item">
                <div class="title">
                    <strong>Shipping #: @item.IdentityCode</strong>
                </div>
                <ul class="info">
                    <li>Status: <span class="order-status pending">@Html.DisplayFor(modelItem => item.ShippingStatus.Name)</span></li>
                    <li>Date: <span class="order-status pending">@Html.DisplayFor(modelItem => item.ShippingCreateDate)</span></li>
                    <li>Priority: <span class="order-date"> @Html.DisplayFor(modelItem => item.ShippingCreateDate)</span></li>
                    <li>Order Total: <span class="order-total">@Html.DisplayFor(modelItem => item.Amount)/@Html.DisplayFor(modelItem => item.Discount)</span></li>
                    <li>Pickup Address: <span class="order-status pending">@Html.DisplayFor(modelItem => item.PickupAddress.Street), @Html.DisplayFor(modelItem => item.PickupAddress.City), @Html.DisplayFor(modelItem => item.PickupAddress.ZipCode)</span></li>
                    <li>Delivery Address: <span class="order-status pending">@Html.DisplayFor(modelItem => item.DeliveryAddress.Street), @Html.DisplayFor(modelItem => item.DeliveryAddress.City), @Html.DisplayFor(modelItem => item.DeliveryAddress.ZipCode)</span></li>
                    <li>
                        <div class="pull-left">
                            <div>PickUp Image</div>
                            <img src="@urlPickup" class="img-rounded" alt="no package image" width="100" height="75">
                        </div>
                        <div class="col-5">
                            <div>Delivery Image</div>
                            <img src="@urlDelivery" class="img-rounded" alt="no package image" width="100" height="75">
                        </div>
                    </li>
                </ul>

            </div>
        }

                </div>
}


        </div>
    </div>
</div>
 <script>
       //$(document).ready(function () {
       //$(".btnAssingShipping").click(function () { alert(1); });

       //});
      @*       var theDiv = document.getElementById("newShipmentTr");
            var button = document.getElementById("button");

            function removeRed() {

                var classContent = theDiv.className;

                theDiv.className = classContent.replace("sr-only", "").trim();
            }

            button.addEventListener("click", removeRed, false);*@


    </script>


    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}



<script>
    $(document).ready(function () {
        $("#impersonateBtn").click(function () {
            $("#impersonateDiv").removeClass('invisible');
            if ($("#ImpersonateCode").val() == '')
            {
                alert("enter impersonate code");
                return false;
            }
            var userName = $("#UserName").val();
            var impersonateCode = $("#ImpersonateCode").val();

                            $.ajax({
                                url: '@Url.Action("SetImpersonate", "admin")', // to get the right path to controller from TableRoutes of Asp.Net MVC
                                dataType: "json", //to work with json format
                                type: "GET", //to do a post request

                                contentType: 'application/json; charset=utf-8', //define a contentType of your request
                                cache: false, //avoid caching results
                                data: { userToImpersonate: userName, code: impersonateCode }, // here you can pass arguments to your request if you need
                                success: function (data) {
                                    alert(data);
                                    if (data =='User Impersonated')
                                    window.location.href ="/home/index";
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    //alert(xhr.responseText);
                                    //alert(xhr.status);
                                    alert(thrownError);

                                }
                            });
            

            //alert($("#UserName").val());
        });
        //$(this).addClass('er-red');
     });
    @*       var theDiv = document.getElementById("newShipmentTr");
    var button = document.getElementById("button");

    function removeRed() {

        var classContent = theDiv.className;

        theDiv.className = classContent.replace("sr-only", "").trim();
    }

    button.addEventListener("click", removeRed, false);*@


</script>

    }
