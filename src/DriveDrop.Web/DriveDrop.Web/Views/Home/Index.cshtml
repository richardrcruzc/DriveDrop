@model DriveDrop.Web.ViewModels.HomeQuote

@{
    ViewData["Title"] = "Home Page";
}


<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
    <ol class="carousel-indicators">
      
    </ol>
    <div class="carousel-inner" role="listbox">
        <div class="item active">

            <img src="~/images/slider_img.jpg" style="height: 380px;width: 1400px;" alt="DriveDrop" class="img-responsive" />

            <div class="carousel-caption" role="option">
                

               
            </div>
        </div>
        
    </div>
    
     
</div>

 
<div class="container">
    <div class="row">

        <div class="row">
            <div class="col-lg-12">
                <div class="center text-center">
                    <h3> Estimated</h3>

                </div>
            </div>
        </div>
        <div class="row">
            <br /><br />
        </div>

        <div class="row">
            <div class="center text-center">
                <div class="col-md-2">

                    <input id="start" class="form-control autocomplete" placeholder="From Seattle, WA" />
                    <span class="text-danger"></span>

                </div>
                <div class="col-md-2">

                    <input id="end" class="form-control" placeholder="From Tacoma, WA" />
                    <span class="text-danger"></span>

                </div>
                <div class="col-md-2">

                    @Html.DropDownListFor(m => m.PackageSizeId, Model.PackageSizeList, new { @class = "form-control" })
                    <span asp-validation-for="TransportTypeId" class="text-danger"></span>

                </div>

                <div class="col-md-2">

                    @Html.DropDownListFor(m => m.PriorityTypeId, Model.PriorityTypeList, new { @class = "form-control" })
                    <span asp-validation-for="TransportTypeId" class="text-danger"></span>

                </div>

                <div class="col-md-2">

                    <input id="weight" class="form-control autocomplete" placeholder="weight" />
                    <span class="text-danger"></span>

                </div>

                <div class="col-md-2">

                    <button type="button" id="calcTotal" class="btn btn-info">Submit</button>

                </div>
            </div>
        </div>


        <div class="row">
            <div class="center text-center">
                <br /><br /><h3>
                    <label id="AmountEstimated"></label>
                </h3>
            </div>
            <br /><br />
            <br /><br />
        </div>

        <div class="row">
            <p></p>
        </div>
      
        <div class="row">
            <p></p>
        </div>

        <div class="row">
            <br /><br />
            <br /><br />
            <br /><br />
            <br /><br />
        </div>
       
    </div>

    </div>



    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
        <script>



        // This example displays an address form, using the autocomplete feature
        // of the Google Places API to help users fill in the information.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete, autocomplete1;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** type {!HTMLInputElement} */
                (document.getElementById('start')),
                { types: ['geocode'] });
            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            //autocomplete.addListener('place_changed', fillInAddress);

            autocomplete1 = new google.maps.places.Autocomplete(
                /** type {!HTMLInputElement} */
                (document.getElementById('end')),
                { types: ['geocode'] });

            ///autocomplete1.addListener('place_changed', fillInAddress1);


        }



        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        //*******************

            $(function () {


                $('#calcTotal').click(function (event) {


            var pAdrress = $('#start').val();
            var dAddress = $('#end').val();


                    var geocoder = new google.maps.Geocoder;

                    var service = new google.maps.DistanceMatrixService;
                    service.getDistanceMatrix({
                        origins: [pAdrress],
                        destinations: [dAddress],
                        travelMode: 'DRIVING',
                        unitSystem: google.maps.UnitSystem.METRIC,
                        avoidHighways: false,
                        avoidTolls: false
                    }, function (response, status) {
                        if (status !== 'OK') {
                            alert('Error was: ' + status);
                        } else {
                            var originList = response.originAddresses;
                            var destinationList = response.destinationAddresses;

                            var results = response.rows[0].elements;
                            var distance = results[0].distance.text.split(" ");


                            var km = distance[0];
                            var transportTypeId = $("#TransportTypeId").val();
                            var priorityTypeId = $("#PriorityTypeId").val();
                            var promoCode = $("#PromoCode").val();
                            var weight = $("#weight").val();

                            $.ajax({
                                url: '@Url.Action("CalculateAmount", "rates")', // to get the right path to controller from TableRoutes of Asp.Net MVC
                                dataType: "json", //to work with json format
                                type: "POST", //to do a post request

                                //  contentType: 'application/json; charset=utf-8', //define a contentType of your request
                                cache: false, //avoid caching results
                                data: { distance: km, weight: weight, priority: priorityTypeId, promoCode: promoCode }, // here you can pass arguments to your request if you need
                                success: function (data) {
                                    // data is your result from controller
                                    if (data) {
                                        //$("#distance").value = km;
                                        //$(".value-Sub").text(data.strSubTotal);
                                        //$(".value-Discount").text(data.strDiscount);
                                        //$(".value-Tax").text(data.strTaxAmount);
                                        $("#AmountEstimated").addClass('alert alert-success');

                                        $("#AmountEstimated").text(data.strAmountToCharge);

                                    }

                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                    //alert(xhr.status);
                                    //alert(thrownError);

                                }
                            });



                            }
                        });


                });
            });












        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwSXLEryUNhIeBBzRN1qxNrqs7Tq15P6o&libraries=places&callback=initAutocomplete"
                async defer></script>
    }
